#!/usr/bin/env bash

# Check arguments
if [[ -n $1 ]];
then

      if [[ $1 == *.zip ]];
      then

            if [[ -f $1 ]];
            then

                  certs_file_path="$1"

            else

echo "Error!
      Passed file does not exists.
      Usage: ./install <certs_zip_file_path> <bot_telegram_api_token> <aws_mqtt_host> <webapp_thing_name>"
                  exit 1

            fi

      else

echo "Error!
      Passed file must be .zip a file.
      Usage: ./install <certs_zip_file_path> <bot_telegram_api_token> <aws_mqtt_host> <webapp_thing_name>"
            exit 1

      fi

else

echo "Syntax error!
      You must pass a file .zip containing aws certificates.
      Usage: ./install <certs_zip_file_path> <bot_telegram_api_token> <aws_mqtt_host> <webapp_thing_name>"
     exit 1

fi

if [[ -n $2 ]];
then

  bot_telegram_api_token="$2"

else

echo "Error!
      You must pass a string containing the telegram bot API token.
      Usage: ./install <certs_zip_file_path> <bot_telegram_api_token> <aws_mqtt_host> <webapp_thing_name>"
    exit 1

fi

if [[ -n $3 ]];
then

  aws_mqtt_host="$3"

else

echo "Error!
      You must pass a string containing the aws mqtt host.
      Usage: ./install <certs_zip_file_path> <bot_telegram_api_token> <aws_mqtt_host> <webapp_thing_name>"
    exit 1

fi

if [[ -n $4 ]];
then

  webapp_thing_name="$4"

else

echo "Error!
      You must pass a string containing the webapp thing name.
      Usage: ./install <certs_zip_file_path> <bot_telegram_api_token> <aws_mqtt_host> <webapp_thing_name>"
    exit 1

fi

# Install node and npm
echo "
----------------------
  NODE AND NPM
----------------------
"

sudo apt-get update
curl -sL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
sudo apt-get install -y nodejs

node -v
npm -v

# Install mongodb
echo "
----------------------
  MONGODB
----------------------
"

# import mongodb 5.0 gpg key + repo

sudo apt-get install gnupg
wget -qO - https://www.mongodb.org/static/pgp/server-5.0.asc | sudo apt-key add -
echo "deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu focal/mongodb-org/5.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-5.0.list

sudo apt-get update

# install the latest version of mongodb
sudo apt-get install -y mongodb-org

# start mongodb
sudo systemctl enable mongod

# Install pm2
echo "
----------------------
  PM2 CONFIG
----------------------
"

# install pm2 with npm
sudo npm install -g pm2

# set pm2 to start automatically on system startup
sudo pm2 startup systemd

# Install nginx
echo "
----------------------
  NGINX
----------------------
"


sudo apt-get install -y nginx
sudo systemctl stop nginx
sudo systemctl enable nginx

# Config firewall settings
echo "
----------------------
  UFW (FIREWALL)
----------------------
"

# allow ssh connections through firewall
sudo ufw allow OpenSSH

# allow http & https through firewall
sudo ufw allow 'Nginx Full'

# enable firewall
sudo ufw --force enable

# Configure environment variable
WEBAPP_DIR=`pwd`
echo "export WEBAPP_DIR=`pwd`">~/.profile

# Configure app
echo "
----------------------
  APP CONFIG
----------------------
"
sudo apt-get update
sudo apt-get install unzip

# Install angular build
(cd .. && echo A | sudo unzip dist.zip)

# Change app's file permissions
(cd .. && sudo chmod 755 ./*/*/*)
(cd .. && sudo chmod 755 ./*/*)
(cd .. && sudo chmod 755 ./*)

# Install certificates
(cd ../server && echo A | sudo unzip ${certs_file_path})

thing_cert_path=$(find ../server/certs/*.pem.crt)
thing_cert_path=$(readlink -f $thing_cert_path)

private_key_path=$(find ../server/certs/*private.pem.key)
private_key_path=$(readlink -f $private_key_path)

amazon_root_ca_path=$(find ../server/certs/*.pem)
amazon_root_ca_path=$(readlink -f $amazon_root_ca_path)


# Configure nginx (proxy and root build)
sudo chmod 755 /etc/nginx/sites-available/default

echo "server {
  charset utf-8;
  listen 80 default_server;
  server_name _;

  # angular app & front-end files
  location / {
    root ${WEBAPP_DIR::-4}/dist/angular8project;
    try_files \$uri /index.html;
  }

  # node api reverse proxy
  location /api {
    proxy_pass http://localhost:8080;
  }
}" | sudo tee /etc/nginx/sites-available/default

sudo chmod 644 /etc/nginx/sites-available/default

# Configure backend start script
echo "#!/usr/bin/env bash

# Backend configuration ======================================================================================
echo mongodb://localhost:27017/ESIT>server_conf.txt                               # | Mongodb uri            |
echo `curl http://169.254.169.254/latest/meta-data/public-ipv4`>>server_conf.txt  # | Own IPv4 public DNS    |
echo '8080'>>server_conf.txt                                                      # | Port                   |
echo '${bot_telegram_api_token}'>>server_conf.txt                                 # | Bot telegram api token |
echo '${private_key_path}'>>server_conf.txt                                       # | Private key thing      |
echo '${thing_cert_path}'>>server_conf.txt                                        # | Certificate thing      |
echo '${amazon_root_ca_path}'>>server_conf.txt                                    # | Certificate CA amazon  |
echo '${webapp_thing_name}'>>server_conf.txt                                      # | AWS thing name webapp  |
echo '${aws_mqtt_host}'>>server_conf.txt                                          # | AWS thing name webapp  |

# Start backend ==============================================================================================
sudo pm2 start server/index.js
" | sudo tee prod_backend_start

# DB creation and configs
echo "
----------------------
  CONFIGURING DB
----------------------
"

sudo systemctl start mongod

echo 'db.createCollection("User")' | sudo mongosh localhost:27017/ESIT
echo 'db.createCollection("Door")' | sudo mongosh localhost:27017/ESIT
echo 'db.createCollection("Access")' | sudo mongosh localhost:27017/ESIT

echo 'db.createCollection("User")' | sudo mongosh localhost:27017/ESIT-Testing
echo 'db.createCollection("Door")' | sudo mongosh localhost:27017/ESIT-Testing
echo 'db.createCollection("Access")' | sudo mongosh localhost:27017/ESIT-Testing

users_test=$(cat ../testing/ESIT-Testing/User.json)
doors_test=$(cat ../testing/ESIT-Testing/Door.json)
access_test=$(cat ../testing/ESIT-Testing/Access.json)

echo "db.User.insertMany(${users_test})" | sudo mongosh localhost:27017/ESIT-Testing
echo "db.Door.insertMany(${doors_test})" | sudo mongosh localhost:27017/ESIT-Testing
echo "db.Access.insertMany(${access_test})" | sudo mongosh localhost:27017/ESIT-Testing

sudo systemctl stop mongod

echo "
----------------------
  DONE!
----------------------
"

# Show instructions
echo ""
echo "Now you can install dependencies:
      1. cd ..
      2. npm install"

echo ""
echo "After installing dependencies, run webapp with:
      1. cd \$WEBAPP_DIR
      2. ./webapp start

stop webapp with:
      1. cd \$WEBAPP_DIR
      2. ./webapp stop

restart webapp with:
      1. cd \$WEBAPP_DIR
      2. ./webapp restart
"

exit 0

